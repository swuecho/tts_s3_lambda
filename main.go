package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"io"
	"bytes"
	"crypto/md5"
	"encoding/json"
	"encoding/hex"
	"net/http"
	"path/filepath"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
)

func main() {
	KeyID := os.Getenv("AWS_S3_KEY")
	SecretKey := os.Getenv("AWS_S3_SECRET")
	Region := "us-east-1"
	// Parse command-line flags
	s3Bucket := flag.String("bucket", "", "S3 bucket name")
	textInput:= flag.String("text", "", "text")
	flag.Parse()

	// Validate arguments
	if *textInput == "" || *s3Bucket == "" {
		fmt.Println("File path and S3 bucket name are required.")
		flag.Usage()
		os.Exit(1)
	}

	// Create an AWS session
	sess, err := session.NewSession(&aws.Config{
		Region:      aws.String(Region),
		Credentials: credentials.NewStaticCredentials(KeyID, SecretKey, ""),
	})
	if err != nil {
		log.Fatal(err)
	}
	filePath := "/tmp/" + md5sum(*textInput)+ ".mp3"
	openAItts(*textInput, filePath)
	// // Upload file to S3 bucket
	err = uploadFileToS3(sess, filePath, *s3Bucket)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("File uploaded successfully!")
}

func md5sum(str string) string {
	hash := md5.Sum([]byte(str))
	hashString := hex.EncodeToString(hash[:])
	return hashString
}

func openAItts(textInput, filePath string) any {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl https://api.openai.com/v1/audio/speech \
	//   -H "Authorization: Bearer $OPENAI_API_KEY" \
	//   -H "Content-Type: application/json" \
	//   -d '{
	//     "model": "tts-1",
	//     "input": "Today is a wonderful day to build something people love!",
	//     "voice": "alloy"
	//   }' \
	//   --output speech.mp3

	type ttsPayload struct {
		Model string `json:"model"`
		Input string `json:"input"`
		Voice string `json:"voice"`
	}

	data := ttsPayload{
		// fill struct
		Model: "tts-1",
		Input: textInput, 
		Voice: "alloy",
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://api.openai.com/v1/audio/speech", body)
	if err != nil {
		// handle err
		fmt.Println("err")
	}
	req.Header.Set("Authorization", os.ExpandEnv("Bearer $OPENAI_API_KEY"))
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		fmt.Println("request err")
	}

	
	defer resp.Body.Close()
	// Create file

	
	file, err := os.Create(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	// Write response body to file
	_, err = io.Copy(file, resp.Body)
	if err != nil {
		return err
	}
	return err
}

func uploadFileToS3(sess *session.Session, filePath string, bucketName string) error {
	// Open the file
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	svc := s3.New(sess)

	// Create an S3 bucket upload input
	_, fileName := filepath.Split(filePath)
	input := &s3.PutObjectInput{
		Body:   file,
		Bucket: aws.String(bucketName),
		Key:    aws.String(fileName),
	}

	// Upload the file to S3
	_, err = svc.PutObject(input)
	if err != nil {
		return err
	}

	return nil
}
