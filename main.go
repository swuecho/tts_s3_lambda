package main

import (
	"bytes"
	"context"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"

	"io"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
)

type ttsPayload struct {
	Model string `json:"model"`
	Input string `json:"input"`
	Voice string `json:"voice"`
}

func md5sum(str string) string {
	hash := md5.Sum([]byte(str))
	hashString := hex.EncodeToString(hash[:])
	return hashString
}

func openAItts(payload ttsPayload) []byte {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl https://api.openai.com/v1/audio/speech \
	//   -H "Authorization: Bearer $OPENAI_API_KEY" \
	//   -H "Content-Type: application/json" \
	//   -d '{
	//     "model": "tts-1",
	//     "input": "Today is a wonderful day to build something people love!",
	//     "voice": "alloy"
	//   }' \
	//   --output speech.mp3

	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		// handle err
		log.Fatal("marshall data err")
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://api.openai.com/v1/audio/speech", body)
	if err != nil {
		// handle err
		fmt.Println("err")
	}
	req.Header.Set("Authorization", os.ExpandEnv("Bearer $OPENAI_API_KEY"))
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		fmt.Println("request err")
	}

	defer resp.Body.Close()
	// Create file

	// Read the API response
	respBody, err := io.ReadAll(io.Reader(resp.Body))
	if err != nil {
		log.Fatal("Error reading response: ", err)
	}
	return respBody
}

func uploadFileToS3(sess *session.Session, bucketName string, fileName string, audioContent []byte) error {

	svc := s3.New(sess)
	suffix := ".mp3"

	input := &s3.PutObjectInput{
		Body:   bytes.NewReader(audioContent),
		Bucket: aws.String(bucketName),
		Key:    aws.String(fileName + suffix),
	}

	// Upload the file to S3
	_, err := svc.PutObject(input)
	if err != nil {
		return err
	}

	return nil
}

type Response struct {
	Message string `json:"message"`
}

func handleRequest(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	var requestBody ttsPayload
	err := json.Unmarshal([]byte(request.Body), &requestBody)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: http.StatusBadRequest,
			Body:       "Invalid request body",
		}, nil
	}

	// Process the request and return a success or failure message
	success := processRequest(requestBody)
	message := ""
	if success {
		message = "Request processed successfully"
	} else {
		message = "Request failed"
	}

	response := Response{
		Message: message,
	}
	responseBody, err := json.Marshal(response)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: http.StatusInternalServerError,
			Body:       "Failed to marshal response",
		}, nil
	}

	return events.APIGatewayProxyResponse{
		StatusCode: http.StatusOK,
		Body:       string(responseBody),
	}, nil
}

func processRequest(request ttsPayload) bool {
	// Add your code here to process the request
	// Example: Perform some processing using the provided content, model, and voice values
	fmt.Printf("Content: %s\n", request.Input)
	fmt.Printf("Model: %s\n", request.Model)
	fmt.Printf("Voice: %s\n", request.Voice)
	data := request
	fileName := md5sum(data.Input)
	audioContent := openAItts(data)
	// // Upload file to S3 bucket
	err := uploadFileToS3(sess, "chat-openai-tts", fileName, audioContent)
	if err != nil {
		log.Fatal(err)
	}

	// For demonstration purposes, assume the request is successful
	return true
}

var sess *session.Session

func main() {

	KeyID := os.Getenv("AWS_S3_KEY")
	SecretKey := os.Getenv("AWS_S3_SECRET")
	Region := "us-east-1"
	// Parse command-line flags

	// Create an AWS session
	sess, err := session.NewSession(&aws.Config{
		Region:      aws.String(Region),
		Credentials: credentials.NewStaticCredentials(KeyID, SecretKey, ""),
	})
	if err != nil {
		log.Fatal(err)
	}

	// data := ttsPayload{
	// 	// fill struct
	// 	Model: "tts-1",
	// 	Input: "this is a text",
	// 	Voice: "alloy",
	// }

	lambda.Start(handleRequest)
}
